// Created by Microsoft (R) C/C++ Compiler Version 10.00.40219.01 (be8652a1).
//
// c:\users\vincent\downloads\comet_1b31\src\tlb2h\debug\tlbinf32.tli
//
// Wrapper implementations for Win32 type library tlbinf32.dll
// compiler-generated file created 07/10/12 at 20:19:55 - DO NOT EDIT!

#pragma once

//
// interface _SearchHelper wrapper method implementations
//

inline _TypeLibInfoPtr _SearchHelper::Me ( ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline HRESULT _SearchHelper::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _SearchHelper::_OldInit ( ) {
    HRESULT _hr = raw__OldInit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _SearchHelper::GetCheckHaveMatch ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckHaveMatch(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _SearchHelper::GetInit ( enum SysKinds SysKind, long LCID, short GrowSize ) {
    HRESULT _hr = get_Init(SysKind, LCID, GrowSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SearchItem wrapper method implementations
//

inline SearchItemPtr SearchItem::Me ( ) {
    struct SearchItem * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchItemPtr(_result, false);
}

inline HRESULT SearchItem::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t SearchItem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long SearchItem::GetSearchData ( ) {
    long _result = 0;
    HRESULT _hr = get_SearchData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short SearchItem::GetTypeInfoNumber ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeInfoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned char SearchItem::Get_OldLibNum ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get__OldLibNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TliSearchTypes SearchItem::GetSearchType ( ) {
    enum TliSearchTypes _result;
    HRESULT _hr = get_SearchType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long SearchItem::GetMemberId ( ) {
    long _result = 0;
    HRESULT _hr = get_MemberId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum InvokeKinds SearchItem::GetInvokeKinds ( ) {
    enum InvokeKinds _result;
    HRESULT _hr = get_InvokeKinds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long SearchItem::GetNamePtrW ( ) {
    long _result = 0;
    HRESULT _hr = get_NamePtrW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short SearchItem::GetLibNum ( ) {
    short _result = 0;
    HRESULT _hr = get_LibNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL SearchItem::GetConstant ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Constant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL SearchItem::GetHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short SearchItem::GetInvokeGroup ( ) {
    short _result = 0;
    HRESULT _hr = get_InvokeGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ListBoxNotification wrapper method implementations
//

inline HRESULT ListBoxNotification::OnAddString ( long lpstr, VARIANT_BOOL fUnicode ) {
    HRESULT _hr = raw_OnAddString(lpstr, fUnicode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CustomSort wrapper method implementations
//

inline HRESULT CustomSort::Compare ( struct SearchItem * Item1, struct SearchItem * Item2, long * Compare ) {
    HRESULT _hr = raw_Compare(Item1, Item2, Compare);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CustomFilter wrapper method implementations
//

inline HRESULT CustomFilter::Visit ( struct SearchItem * Item, enum TliCustomFilterAction * Action ) {
    HRESULT _hr = raw_Visit(Item, Action);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SearchResults wrapper method implementations
//

inline SearchResultsPtr SearchResults::Me ( ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline HRESULT SearchResults::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr SearchResults::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline SearchItemPtr SearchResults::Get_OldItem ( short Index ) {
    struct SearchItem * _result = 0;
    HRESULT _hr = get__OldItem(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchItemPtr(_result, false);
}

inline short SearchResults::Get_OldCount ( ) {
    short _result = 0;
    HRESULT _hr = get__OldCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL SearchResults::GetSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT SearchResults::Sort ( struct CustomSort * CustomSort ) {
    HRESULT _hr = raw_Sort(CustomSort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SearchResultsPtr SearchResults::Filter ( struct CustomFilter * CustomFilter, struct SearchResults * * AppendExtractedTo, struct SearchItem * StartAfter ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_Filter(CustomFilter, AppendExtractedTo, StartAfter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline SearchItemPtr SearchResults::GetItem ( long Index ) {
    struct SearchItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchItemPtr(_result, false);
}

inline long SearchResults::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long SearchResults::LocateSorted ( struct CustomSort * CustomSort ) {
    long _result = 0;
    HRESULT _hr = raw_LocateSorted(CustomSort, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long SearchResults::Locate ( _bstr_t SearchString, struct CustomSort * CustomSort, long StartAfter ) {
    long _result = 0;
    HRESULT _hr = raw_Locate(SearchString, CustomSort, StartAfter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CustomData wrapper method implementations
//

inline CustomDataPtr CustomData::Me ( ) {
    struct CustomData * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataPtr(_result, false);
}

inline HRESULT CustomData::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t CustomData::GetGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t CustomData::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface CustomDataCollection wrapper method implementations
//

inline CustomDataCollectionPtr CustomDataCollection::Me ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline HRESULT CustomDataCollection::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr CustomDataCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline CustomDataPtr CustomDataCollection::GetItem ( short Index ) {
    struct CustomData * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataPtr(_result, false);
}

inline short CustomDataCollection::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface VarTypeInfo wrapper method implementations
//

inline VarTypeInfoPtr VarTypeInfo::Me ( ) {
    struct VarTypeInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VarTypeInfoPtr(_result, false);
}

inline HRESULT VarTypeInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void VarTypeInfo::Get_OldVarType ( ) {
    HRESULT _hr = get__OldVarType();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TypeInfoPtr VarTypeInfo::GetTypeInfo ( ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = get_TypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

inline short VarTypeInfo::GetTypeInfoNumber ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeInfoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t VarTypeInfo::GetTypedVariant ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TypedVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL VarTypeInfo::GetIsExternalType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsExternalType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _TypeLibInfoPtr VarTypeInfo::GetTypeLibInfoExternal ( ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = get_TypeLibInfoExternal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline short VarTypeInfo::GetPointerLevel ( ) {
    short _result = 0;
    HRESULT _hr = get_PointerLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TliVarType VarTypeInfo::GetVarType ( ) {
    enum TliVarType _result;
    HRESULT _hr = get_VarType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short VarTypeInfo::ArrayBounds ( SAFEARRAY * * Bounds ) {
    short _result = 0;
    HRESULT _hr = raw_ArrayBounds(Bounds, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short VarTypeInfo::GetElementPointerLevel ( ) {
    short _result = 0;
    HRESULT _hr = get_ElementPointerLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ParameterInfo wrapper method implementations
//

inline ParameterInfoPtr ParameterInfo::Me ( ) {
    struct ParameterInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParameterInfoPtr(_result, false);
}

inline HRESULT ParameterInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ParameterInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ParameterInfo::GetOptional ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Optional(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ParameterInfo::Get_OldFlags ( ) {
    HRESULT _hr = get__OldFlags();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VarTypeInfoPtr ParameterInfo::GetVarTypeInfo ( ) {
    struct VarTypeInfo * _result = 0;
    HRESULT _hr = get_VarTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VarTypeInfoPtr(_result, false);
}

inline VARIANT_BOOL ParameterInfo::GetDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ParameterInfo::GetDefaultValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ParameterInfo::GetHasCustomData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasCustomData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline CustomDataCollectionPtr ParameterInfo::GetCustomDataCollection ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = get_CustomDataCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline enum ParamFlags ParameterInfo::GetFlags ( ) {
    enum ParamFlags _result;
    HRESULT _hr = get_Flags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Parameters wrapper method implementations
//

inline ParametersPtr Parameters::Me ( ) {
    struct Parameters * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParametersPtr(_result, false);
}

inline HRESULT Parameters::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr Parameters::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline ParameterInfoPtr Parameters::GetItem ( short Index ) {
    struct ParameterInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParameterInfoPtr(_result, false);
}

inline short Parameters::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short Parameters::GetOptionalCount ( ) {
    short _result = 0;
    HRESULT _hr = get_OptionalCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short Parameters::GetDefaultCount ( ) {
    short _result = 0;
    HRESULT _hr = get_DefaultCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface MemberInfo wrapper method implementations
//

inline MemberInfoPtr MemberInfo::Me ( ) {
    struct MemberInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MemberInfoPtr(_result, false);
}

inline HRESULT MemberInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t MemberInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void MemberInfo::Get_OldHelpString ( ) {
    HRESULT _hr = get__OldHelpString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long MemberInfo::GetHelpContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t MemberInfo::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ParametersPtr MemberInfo::GetParameters ( ) {
    struct Parameters * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParametersPtr(_result, false);
}

inline VarTypeInfoPtr MemberInfo::GetReturnType ( ) {
    struct VarTypeInfo * _result = 0;
    HRESULT _hr = get_ReturnType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VarTypeInfoPtr(_result, false);
}

inline short MemberInfo::GetAttributeMask ( ) {
    short _result = 0;
    HRESULT _hr = get_AttributeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short MemberInfo::GetAttributeStrings ( SAFEARRAY * * AttributeArray ) {
    short _result = 0;
    HRESULT _hr = get_AttributeStrings(AttributeArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void MemberInfo::Get_OldDescKind ( ) {
    HRESULT _hr = get__OldDescKind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t MemberInfo::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long MemberInfo::GetMemberId ( ) {
    long _result = 0;
    HRESULT _hr = get_MemberId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short MemberInfo::GetVTableOffset ( ) {
    short _result = 0;
    HRESULT _hr = get_VTableOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum InvokeKinds MemberInfo::GetInvokeKind ( ) {
    enum InvokeKinds _result;
    HRESULT _hr = get_InvokeKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline CustomDataCollectionPtr MemberInfo::GetCustomDataCollection ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = get_CustomDataCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline enum DescKinds MemberInfo::GetDescKind ( ) {
    enum DescKinds _result;
    HRESULT _hr = get_DescKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT MemberInfo::GetDllEntry ( BSTR * DllName, BSTR * EntryName, short * Ordinal ) {
    HRESULT _hr = raw_GetDllEntry(DllName, EntryName, Ordinal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t MemberInfo::GetHelpString ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t MemberInfo::GetHelpStringDll ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpStringDll(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long MemberInfo::GetHelpStringContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpStringContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum CallConvs MemberInfo::GetCallConv ( ) {
    enum CallConvs _result;
    HRESULT _hr = get_CallConv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Members wrapper method implementations
//

inline MembersPtr Members::Me ( ) {
    struct Members * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MembersPtr(_result, false);
}

inline HRESULT Members::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr Members::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline MemberInfoPtr Members::GetItem ( short Index ) {
    struct MemberInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MemberInfoPtr(_result, false);
}

inline short Members::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Members::PutFuncFilter ( enum FuncFlags retVal ) {
    HRESULT _hr = put_FuncFilter(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum FuncFlags Members::GetFuncFilter ( ) {
    enum FuncFlags _result;
    HRESULT _hr = get_FuncFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Members::PutVarFilter ( enum VarFlags retVal ) {
    HRESULT _hr = put_VarFilter(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum VarFlags Members::GetVarFilter ( ) {
    enum VarFlags _result;
    HRESULT _hr = get_VarFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT Members::_OldFillList ( ) {
    HRESULT _hr = raw__OldFillList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SearchResultsPtr Members::GetGetFilteredMembers ( VARIANT_BOOL ShowUnderscore ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = get_GetFilteredMembers(ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline short Members::GetFilteredMembersDirect ( int hWnd, enum TliWindowTypes WindowType, enum TliItemDataTypes ItemDataType, VARIANT_BOOL ShowUnderscore ) {
    short _result = 0;
    HRESULT _hr = raw_GetFilteredMembersDirect(hWnd, WindowType, ItemDataType, ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DeclarationInfo wrapper method implementations
//

inline DeclarationInfoPtr DeclarationInfo::Me ( ) {
    struct DeclarationInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DeclarationInfoPtr(_result, false);
}

inline HRESULT DeclarationInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t DeclarationInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t DeclarationInfo::GetGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void DeclarationInfo::Get_OldHelpString ( ) {
    HRESULT _hr = get__OldHelpString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long DeclarationInfo::GetHelpContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t DeclarationInfo::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short DeclarationInfo::GetAttributeMask ( ) {
    short _result = 0;
    HRESULT _hr = get_AttributeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short DeclarationInfo::GetAttributeStrings ( SAFEARRAY * * AttributeArray ) {
    short _result = 0;
    HRESULT _hr = get_AttributeStrings(AttributeArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DeclarationInfo::Get_OldTypeKind ( ) {
    HRESULT _hr = get__OldTypeKind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t DeclarationInfo::GetTypeKindString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeKindString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short DeclarationInfo::GetTypeInfoNumber ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeInfoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT DeclarationInfo::_placeholder_VTableInterface ( ) {
    HRESULT _hr = raw__placeholder_VTableInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline MemberInfoPtr DeclarationInfo::GetGetMember ( const _variant_t & Index ) {
    struct MemberInfo * _result = 0;
    HRESULT _hr = get_GetMember(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MemberInfoPtr(_result, false);
}

inline MembersPtr DeclarationInfo::GetMembers ( ) {
    struct Members * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MembersPtr(_result, false);
}

inline _TypeLibInfoPtr DeclarationInfo::GetParent ( ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline HRESULT DeclarationInfo::_ImpliedInterfaces ( ) {
    HRESULT _hr = raw__ImpliedInterfaces();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DeclarationInfo::_DefaultInterface ( ) {
    HRESULT _hr = raw__DefaultInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DeclarationInfo::_DefaultEventInterface ( ) {
    HRESULT _hr = raw__DefaultEventInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum TypeKinds DeclarationInfo::GetTypeKind ( ) {
    enum TypeKinds _result;
    HRESULT _hr = get_TypeKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VarTypeInfoPtr DeclarationInfo::GetResolvedType ( ) {
    struct VarTypeInfo * _result = 0;
    HRESULT _hr = get_ResolvedType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VarTypeInfoPtr(_result, false);
}

inline CustomDataCollectionPtr DeclarationInfo::GetCustomDataCollection ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = get_CustomDataCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline _bstr_t DeclarationInfo::GetHelpString ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUnknownPtr DeclarationInfo::GetITypeInfo ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ITypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline short DeclarationInfo::GetMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short DeclarationInfo::GetMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t DeclarationInfo::GetHelpStringDll ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpStringDll(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long DeclarationInfo::GetHelpStringContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpStringContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IntrinsicAliasInfo wrapper method implementations
//

inline IntrinsicAliasInfoPtr IntrinsicAliasInfo::Me ( ) {
    struct IntrinsicAliasInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IntrinsicAliasInfoPtr(_result, false);
}

inline HRESULT IntrinsicAliasInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IntrinsicAliasInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IntrinsicAliasInfo::GetGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IntrinsicAliasInfo::Get_OldHelpString ( ) {
    HRESULT _hr = get__OldHelpString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IntrinsicAliasInfo::GetHelpContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IntrinsicAliasInfo::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short IntrinsicAliasInfo::GetAttributeMask ( ) {
    short _result = 0;
    HRESULT _hr = get_AttributeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IntrinsicAliasInfo::GetAttributeStrings ( SAFEARRAY * * AttributeArray ) {
    short _result = 0;
    HRESULT _hr = get_AttributeStrings(AttributeArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IntrinsicAliasInfo::Get_OldTypeKind ( ) {
    HRESULT _hr = get__OldTypeKind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IntrinsicAliasInfo::GetTypeKindString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeKindString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short IntrinsicAliasInfo::GetTypeInfoNumber ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeInfoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IntrinsicAliasInfo::_placeholder_VTableInterface ( ) {
    HRESULT _hr = raw__placeholder_VTableInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IntrinsicAliasInfo::_placeholder_GetMember ( ) {
    HRESULT _hr = raw__placeholder_GetMember();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IntrinsicAliasInfo::_placeholder_Members ( ) {
    HRESULT _hr = raw__placeholder_Members();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _TypeLibInfoPtr IntrinsicAliasInfo::GetParent ( ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline HRESULT IntrinsicAliasInfo::_ImpliedInterfaces ( ) {
    HRESULT _hr = raw__ImpliedInterfaces();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IntrinsicAliasInfo::_DefaultInterface ( ) {
    HRESULT _hr = raw__DefaultInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IntrinsicAliasInfo::_DefaultEventInterface ( ) {
    HRESULT _hr = raw__DefaultEventInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum TypeKinds IntrinsicAliasInfo::GetTypeKind ( ) {
    enum TypeKinds _result;
    HRESULT _hr = get_TypeKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VarTypeInfoPtr IntrinsicAliasInfo::GetResolvedType ( ) {
    struct VarTypeInfo * _result = 0;
    HRESULT _hr = get_ResolvedType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VarTypeInfoPtr(_result, false);
}

inline CustomDataCollectionPtr IntrinsicAliasInfo::GetCustomDataCollection ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = get_CustomDataCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline _bstr_t IntrinsicAliasInfo::GetHelpString ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUnknownPtr IntrinsicAliasInfo::GetITypeInfo ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ITypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline short IntrinsicAliasInfo::GetMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IntrinsicAliasInfo::GetMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IntrinsicAliasInfo::GetHelpStringDll ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpStringDll(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IntrinsicAliasInfo::GetHelpStringContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpStringContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface InterfaceInfo wrapper method implementations
//

inline InterfaceInfoPtr InterfaceInfo::Me ( ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline HRESULT InterfaceInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t InterfaceInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t InterfaceInfo::GetGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void InterfaceInfo::Get_OldHelpString ( ) {
    HRESULT _hr = get__OldHelpString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long InterfaceInfo::GetHelpContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t InterfaceInfo::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short InterfaceInfo::GetAttributeMask ( ) {
    short _result = 0;
    HRESULT _hr = get_AttributeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short InterfaceInfo::GetAttributeStrings ( SAFEARRAY * * AttributeArray ) {
    short _result = 0;
    HRESULT _hr = get_AttributeStrings(AttributeArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void InterfaceInfo::Get_OldTypeKind ( ) {
    HRESULT _hr = get__OldTypeKind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t InterfaceInfo::GetTypeKindString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeKindString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short InterfaceInfo::GetTypeInfoNumber ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeInfoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline InterfaceInfoPtr InterfaceInfo::GetVTableInterface ( ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = get_VTableInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline MemberInfoPtr InterfaceInfo::GetGetMember ( const _variant_t & Index ) {
    struct MemberInfo * _result = 0;
    HRESULT _hr = get_GetMember(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MemberInfoPtr(_result, false);
}

inline MembersPtr InterfaceInfo::GetMembers ( ) {
    struct Members * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MembersPtr(_result, false);
}

inline _TypeLibInfoPtr InterfaceInfo::GetParent ( ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline InterfacesPtr InterfaceInfo::GetImpliedInterfaces ( ) {
    struct Interfaces * _result = 0;
    HRESULT _hr = get_ImpliedInterfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfacesPtr(_result, false);
}

inline HRESULT InterfaceInfo::_DefaultInterface ( ) {
    HRESULT _hr = raw__DefaultInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT InterfaceInfo::_DefaultEventInterface ( ) {
    HRESULT _hr = raw__DefaultEventInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum TypeKinds InterfaceInfo::GetTypeKind ( ) {
    enum TypeKinds _result;
    HRESULT _hr = get_TypeKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VarTypeInfoPtr InterfaceInfo::GetResolvedType ( ) {
    struct VarTypeInfo * _result = 0;
    HRESULT _hr = get_ResolvedType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VarTypeInfoPtr(_result, false);
}

inline CustomDataCollectionPtr InterfaceInfo::GetCustomDataCollection ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = get_CustomDataCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline _bstr_t InterfaceInfo::GetHelpString ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUnknownPtr InterfaceInfo::GetITypeInfo ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ITypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline short InterfaceInfo::GetMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short InterfaceInfo::GetMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t InterfaceInfo::GetHelpStringDll ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpStringDll(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long InterfaceInfo::GetHelpStringContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpStringContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _BaseTypeInfos wrapper method implementations
//

inline TypeInfosPtr _BaseTypeInfos::Me ( ) {
    struct TypeInfos * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfosPtr(_result, false);
}

inline HRESULT _BaseTypeInfos::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr _BaseTypeInfos::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline short _BaseTypeInfos::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Interfaces wrapper method implementations
//

inline InterfaceInfoPtr Interfaces::GetItem ( short Index ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline InterfaceInfoPtr Interfaces::GetIndexedItem ( short TypeInfoNumber ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = get_IndexedItem(TypeInfoNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline InterfaceInfoPtr Interfaces::GetNamedItem ( BSTR * TypeInfoName ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = get_NamedItem(TypeInfoName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

//
// interface CoClassInfo wrapper method implementations
//

inline CoClassInfoPtr CoClassInfo::Me ( ) {
    struct CoClassInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CoClassInfoPtr(_result, false);
}

inline HRESULT CoClassInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t CoClassInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t CoClassInfo::GetGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void CoClassInfo::Get_OldHelpString ( ) {
    HRESULT _hr = get__OldHelpString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long CoClassInfo::GetHelpContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t CoClassInfo::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short CoClassInfo::GetAttributeMask ( ) {
    short _result = 0;
    HRESULT _hr = get_AttributeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short CoClassInfo::GetAttributeStrings ( SAFEARRAY * * AttributeArray ) {
    short _result = 0;
    HRESULT _hr = get_AttributeStrings(AttributeArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CoClassInfo::Get_OldTypeKind ( ) {
    HRESULT _hr = get__OldTypeKind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t CoClassInfo::GetTypeKindString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeKindString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short CoClassInfo::GetTypeInfoNumber ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeInfoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT CoClassInfo::_placeholder_VTableInterface ( ) {
    HRESULT _hr = raw__placeholder_VTableInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT CoClassInfo::_placeholder_GetMember ( ) {
    HRESULT _hr = raw__placeholder_GetMember();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT CoClassInfo::_placeholder_Members ( ) {
    HRESULT _hr = raw__placeholder_Members();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _TypeLibInfoPtr CoClassInfo::GetParent ( ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline InterfacesPtr CoClassInfo::GetInterfaces ( ) {
    struct Interfaces * _result = 0;
    HRESULT _hr = get_Interfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfacesPtr(_result, false);
}

inline InterfaceInfoPtr CoClassInfo::GetDefaultInterface ( ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = get_DefaultInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline InterfaceInfoPtr CoClassInfo::GetDefaultEventInterface ( ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = get_DefaultEventInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline enum TypeKinds CoClassInfo::GetTypeKind ( ) {
    enum TypeKinds _result;
    HRESULT _hr = get_TypeKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VarTypeInfoPtr CoClassInfo::GetResolvedType ( ) {
    struct VarTypeInfo * _result = 0;
    HRESULT _hr = get_ResolvedType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VarTypeInfoPtr(_result, false);
}

inline CustomDataCollectionPtr CoClassInfo::GetCustomDataCollection ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = get_CustomDataCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline _bstr_t CoClassInfo::GetHelpString ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUnknownPtr CoClassInfo::GetITypeInfo ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ITypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline short CoClassInfo::GetMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short CoClassInfo::GetMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t CoClassInfo::GetHelpStringDll ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpStringDll(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long CoClassInfo::GetHelpStringContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpStringContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CoClasses wrapper method implementations
//

inline CoClassInfoPtr CoClasses::GetItem ( short Index ) {
    struct CoClassInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CoClassInfoPtr(_result, false);
}

inline CoClassInfoPtr CoClasses::GetIndexedItem ( short TypeInfoNumber ) {
    struct CoClassInfo * _result = 0;
    HRESULT _hr = get_IndexedItem(TypeInfoNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CoClassInfoPtr(_result, false);
}

inline CoClassInfoPtr CoClasses::GetNamedItem ( BSTR * TypeInfoName ) {
    struct CoClassInfo * _result = 0;
    HRESULT _hr = get_NamedItem(TypeInfoName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CoClassInfoPtr(_result, false);
}

//
// interface Declarations wrapper method implementations
//

inline DeclarationInfoPtr Declarations::GetItem ( short Index ) {
    struct DeclarationInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DeclarationInfoPtr(_result, false);
}

inline DeclarationInfoPtr Declarations::GetIndexedItem ( short TypeInfoNumber ) {
    struct DeclarationInfo * _result = 0;
    HRESULT _hr = get_IndexedItem(TypeInfoNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DeclarationInfoPtr(_result, false);
}

inline DeclarationInfoPtr Declarations::GetNamedItem ( BSTR * TypeInfoName ) {
    struct DeclarationInfo * _result = 0;
    HRESULT _hr = get_NamedItem(TypeInfoName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DeclarationInfoPtr(_result, false);
}

//
// interface TypeInfo wrapper method implementations
//

inline TypeInfoPtr TypeInfo::Me ( ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

inline HRESULT TypeInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t TypeInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t TypeInfo::GetGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void TypeInfo::Get_OldHelpString ( ) {
    HRESULT _hr = get__OldHelpString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long TypeInfo::GetHelpContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t TypeInfo::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short TypeInfo::GetAttributeMask ( ) {
    short _result = 0;
    HRESULT _hr = get_AttributeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short TypeInfo::GetAttributeStrings ( SAFEARRAY * * AttributeArray ) {
    short _result = 0;
    HRESULT _hr = get_AttributeStrings(AttributeArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void TypeInfo::Get_OldTypeKind ( ) {
    HRESULT _hr = get__OldTypeKind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t TypeInfo::GetTypeKindString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeKindString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short TypeInfo::GetTypeInfoNumber ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeInfoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline InterfaceInfoPtr TypeInfo::GetVTableInterface ( ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = get_VTableInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline MemberInfoPtr TypeInfo::GetGetMember ( const _variant_t & Index ) {
    struct MemberInfo * _result = 0;
    HRESULT _hr = get_GetMember(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MemberInfoPtr(_result, false);
}

inline MembersPtr TypeInfo::GetMembers ( ) {
    struct Members * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MembersPtr(_result, false);
}

inline _TypeLibInfoPtr TypeInfo::GetParent ( ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline InterfacesPtr TypeInfo::GetInterfaces ( ) {
    struct Interfaces * _result = 0;
    HRESULT _hr = get_Interfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfacesPtr(_result, false);
}

inline InterfaceInfoPtr TypeInfo::GetDefaultInterface ( ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = get_DefaultInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline InterfaceInfoPtr TypeInfo::GetDefaultEventInterface ( ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = get_DefaultEventInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline enum TypeKinds TypeInfo::GetTypeKind ( ) {
    enum TypeKinds _result;
    HRESULT _hr = get_TypeKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VarTypeInfoPtr TypeInfo::GetResolvedType ( ) {
    struct VarTypeInfo * _result = 0;
    HRESULT _hr = get_ResolvedType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VarTypeInfoPtr(_result, false);
}

inline CustomDataCollectionPtr TypeInfo::GetCustomDataCollection ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = get_CustomDataCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline _bstr_t TypeInfo::GetHelpString ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUnknownPtr TypeInfo::GetITypeInfo ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ITypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline short TypeInfo::GetMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short TypeInfo::GetMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t TypeInfo::GetHelpStringDll ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpStringDll(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long TypeInfo::GetHelpStringContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpStringContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ConstantInfo wrapper method implementations
//

inline TypeInfoPtr ConstantInfo::Me ( ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

inline HRESULT ConstantInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ConstantInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ConstantInfo::GetGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ConstantInfo::Get_OldHelpString ( ) {
    HRESULT _hr = get__OldHelpString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ConstantInfo::GetHelpContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ConstantInfo::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short ConstantInfo::GetAttributeMask ( ) {
    short _result = 0;
    HRESULT _hr = get_AttributeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short ConstantInfo::GetAttributeStrings ( SAFEARRAY * * AttributeArray ) {
    short _result = 0;
    HRESULT _hr = get_AttributeStrings(AttributeArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ConstantInfo::Get_OldTypeKind ( ) {
    HRESULT _hr = get__OldTypeKind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ConstantInfo::GetTypeKindString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeKindString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short ConstantInfo::GetTypeInfoNumber ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeInfoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ConstantInfo::_placeholder_VTableInterface ( ) {
    HRESULT _hr = raw__placeholder_VTableInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline MemberInfoPtr ConstantInfo::GetGetMember ( const _variant_t & Index ) {
    struct MemberInfo * _result = 0;
    HRESULT _hr = get_GetMember(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MemberInfoPtr(_result, false);
}

inline MembersPtr ConstantInfo::GetMembers ( ) {
    struct Members * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MembersPtr(_result, false);
}

inline _TypeLibInfoPtr ConstantInfo::GetParent ( ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline HRESULT ConstantInfo::_ImpliedInterfaces ( ) {
    HRESULT _hr = raw__ImpliedInterfaces();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ConstantInfo::_DefaultInterface ( ) {
    HRESULT _hr = raw__DefaultInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ConstantInfo::_DefaultEventInterface ( ) {
    HRESULT _hr = raw__DefaultEventInterface();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum TypeKinds ConstantInfo::GetTypeKind ( ) {
    enum TypeKinds _result;
    HRESULT _hr = get_TypeKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VarTypeInfoPtr ConstantInfo::GetResolvedType ( ) {
    struct VarTypeInfo * _result = 0;
    HRESULT _hr = get_ResolvedType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VarTypeInfoPtr(_result, false);
}

inline CustomDataCollectionPtr ConstantInfo::GetCustomDataCollection ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = get_CustomDataCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline _bstr_t ConstantInfo::GetHelpString ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUnknownPtr ConstantInfo::GetITypeInfo ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ITypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline short ConstantInfo::GetMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short ConstantInfo::GetMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ConstantInfo::GetHelpStringDll ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpStringDll(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ConstantInfo::GetHelpStringContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpStringContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Constants wrapper method implementations
//

inline ConstantInfoPtr Constants::GetItem ( short Index ) {
    struct ConstantInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConstantInfoPtr(_result, false);
}

inline ConstantInfoPtr Constants::GetIndexedItem ( short TypeInfoNumber ) {
    struct ConstantInfo * _result = 0;
    HRESULT _hr = get_IndexedItem(TypeInfoNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConstantInfoPtr(_result, false);
}

inline ConstantInfoPtr Constants::GetNamedItem ( BSTR * TypeInfoName ) {
    struct ConstantInfo * _result = 0;
    HRESULT _hr = get_NamedItem(TypeInfoName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConstantInfoPtr(_result, false);
}

//
// interface _TLIApplication wrapper method implementations
//

inline _TLIApplicationPtr _TLIApplication::Me ( ) {
    struct _TLIApplication * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TLIApplicationPtr(_result, false);
}

inline HRESULT _TLIApplication::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _TypeLibInfoPtr _TLIApplication::TypeLibInfoFromFile ( _bstr_t FileName ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = raw_TypeLibInfoFromFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline InterfaceInfoPtr _TLIApplication::InterfaceInfoFromObject ( IDispatch * Object ) {
    struct InterfaceInfo * _result = 0;
    HRESULT _hr = raw_InterfaceInfoFromObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfaceInfoPtr(_result, false);
}

inline ListBoxNotificationPtr _TLIApplication::GetListBoxNotification ( ) {
    struct ListBoxNotification * _result = 0;
    HRESULT _hr = get_ListBoxNotification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListBoxNotificationPtr(_result, false);
}

inline void _TLIApplication::PutRefListBoxNotification ( struct ListBoxNotification * retVal ) {
    HRESULT _hr = putref_ListBoxNotification(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _TLIApplication::GetResolveAliases ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResolveAliases(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _TLIApplication::PutResolveAliases ( VARIANT_BOOL retVal ) {
    HRESULT _hr = put_ResolveAliases(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t _TLIApplication::InvokeHook ( IDispatch * Object, const _variant_t & NameOrID, enum InvokeKinds InvokeKind, SAFEARRAY * * ReverseArgList ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_InvokeHook(Object, NameOrID, InvokeKind, ReverseArgList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t _TLIApplication::InvokeHookArray ( IDispatch * Object, const _variant_t & NameOrID, enum InvokeKinds InvokeKind, SAFEARRAY * * ReverseArgList ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_InvokeHookArray(Object, NameOrID, InvokeKind, ReverseArgList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT _TLIApplication::InvokeHookSub ( IDispatch * Object, const _variant_t & NameOrID, enum InvokeKinds InvokeKind, SAFEARRAY * * ReverseArgList ) {
    HRESULT _hr = raw_InvokeHookSub(Object, NameOrID, InvokeKind, ReverseArgList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TLIApplication::InvokeHookArraySub ( IDispatch * Object, const _variant_t & NameOrID, enum InvokeKinds InvokeKind, SAFEARRAY * * ReverseArgList ) {
    HRESULT _hr = raw_InvokeHookArraySub(Object, NameOrID, InvokeKind, ReverseArgList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline TypeInfoPtr _TLIApplication::ClassInfoFromObject ( IUnknown * Object ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = raw_ClassInfoFromObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

inline long _TLIApplication::InvokeID ( IDispatch * Object, _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_InvokeID(Object, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _TLIApplication::GetInvokeLCID ( ) {
    long _result = 0;
    HRESULT _hr = get_InvokeLCID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _TLIApplication::PutInvokeLCID ( long retVal ) {
    HRESULT _hr = put_InvokeLCID(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TypeInfoPtr _TLIApplication::TypeInfoFromITypeInfo ( IUnknown * ptinfo ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = raw_TypeInfoFromITypeInfo(ptinfo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

inline _TypeLibInfoPtr _TLIApplication::TypeLibInfoFromITypeLib ( IUnknown * pITypeLib ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = raw_TypeLibInfoFromITypeLib(pITypeLib, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline _TypeLibInfoPtr _TLIApplication::TypeLibInfoFromRegistry ( _bstr_t TypeLibGuid, short MajorVersion, short MinorVersion, long LCID ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = raw_TypeLibInfoFromRegistry(TypeLibGuid, MajorVersion, MinorVersion, LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline TypeInfoPtr _TLIApplication::TypeInfoFromRecordVariant ( VARIANT * RecordVariant ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = raw_TypeInfoFromRecordVariant(RecordVariant, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

inline _variant_t _TLIApplication::GetRecordField ( VARIANT * RecordVariant, BSTR * FieldName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RecordField(RecordVariant, FieldName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void _TLIApplication::PutRecordField ( VARIANT * RecordVariant, BSTR * FieldName, VARIANT * retVal ) {
    HRESULT _hr = put_RecordField(RecordVariant, FieldName, retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void _TLIApplication::PutRefRecordField ( VARIANT * RecordVariant, BSTR * FieldName, VARIANT * retVal ) {
    HRESULT _hr = putref_RecordField(RecordVariant, FieldName, retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TypeInfos wrapper method implementations
//

inline TypeInfoPtr TypeInfos::GetItem ( short Index ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

inline TypeInfoPtr TypeInfos::GetIndexedItem ( short TypeInfoNumber ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = get_IndexedItem(TypeInfoNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

inline TypeInfoPtr TypeInfos::GetNamedItem ( BSTR * TypeInfoName ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = get_NamedItem(TypeInfoName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

//
// interface Records wrapper method implementations
//

inline RecordInfoPtr Records::GetItem ( short Index ) {
    struct RecordInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecordInfoPtr(_result, false);
}

inline RecordInfoPtr Records::GetIndexedItem ( short TypeInfoNumber ) {
    struct RecordInfo * _result = 0;
    HRESULT _hr = get_IndexedItem(TypeInfoNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecordInfoPtr(_result, false);
}

inline RecordInfoPtr Records::GetNamedItem ( BSTR * TypeInfoName ) {
    struct RecordInfo * _result = 0;
    HRESULT _hr = get_NamedItem(TypeInfoName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecordInfoPtr(_result, false);
}

//
// interface IntrinsicAliases wrapper method implementations
//

inline IntrinsicAliasInfoPtr IntrinsicAliases::GetItem ( short Index ) {
    struct IntrinsicAliasInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IntrinsicAliasInfoPtr(_result, false);
}

inline IntrinsicAliasInfoPtr IntrinsicAliases::GetIndexedItem ( short TypeInfoNumber ) {
    struct IntrinsicAliasInfo * _result = 0;
    HRESULT _hr = get_IndexedItem(TypeInfoNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IntrinsicAliasInfoPtr(_result, false);
}

inline IntrinsicAliasInfoPtr IntrinsicAliases::GetNamedItem ( BSTR * TypeInfoName ) {
    struct IntrinsicAliasInfo * _result = 0;
    HRESULT _hr = get_NamedItem(TypeInfoName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IntrinsicAliasInfoPtr(_result, false);
}

//
// interface Unions wrapper method implementations
//

inline UnionInfoPtr Unions::GetItem ( short Index ) {
    struct UnionInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UnionInfoPtr(_result, false);
}

inline UnionInfoPtr Unions::GetIndexedItem ( short TypeInfoNumber ) {
    struct UnionInfo * _result = 0;
    HRESULT _hr = get_IndexedItem(TypeInfoNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UnionInfoPtr(_result, false);
}

inline UnionInfoPtr Unions::GetNamedItem ( BSTR * TypeInfoName ) {
    struct UnionInfo * _result = 0;
    HRESULT _hr = get_NamedItem(TypeInfoName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UnionInfoPtr(_result, false);
}

//
// interface _TypeLibInfo wrapper method implementations
//

inline _TypeLibInfoPtr _TypeLibInfo::Me ( ) {
    struct _TypeLibInfo * _result = 0;
    HRESULT _hr = raw_Me(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypeLibInfoPtr(_result, false);
}

inline HRESULT _TypeLibInfo::_placeholder_destructor ( ) {
    HRESULT _hr = raw__placeholder_destructor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _TypeLibInfo::GetContainingFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContainingFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _TypeLibInfo::PutContainingFile ( _bstr_t retVal ) {
    HRESULT _hr = put_ContainingFile(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _TypeLibInfo::LoadRegTypeLib ( _bstr_t TypeLibGuid, short MajorVersion, short MinorVersion, long LCID ) {
    HRESULT _hr = raw_LoadRegTypeLib(TypeLibGuid, MajorVersion, MinorVersion, LCID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _TypeLibInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _TypeLibInfo::Get_OldHelpString ( ) {
    HRESULT _hr = get__OldHelpString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _TypeLibInfo::GetHelpContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t _TypeLibInfo::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _TypeLibInfo::GetGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long _TypeLibInfo::GetLCID ( ) {
    long _result = 0;
    HRESULT _hr = get_LCID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _TypeLibInfo::Get_OldSysKind ( ) {
    HRESULT _hr = get__OldSysKind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short _TypeLibInfo::GetMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _TypeLibInfo::GetMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _TypeLibInfo::GetAttributeMask ( ) {
    short _result = 0;
    HRESULT _hr = get_AttributeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _TypeLibInfo::GetAttributeStrings ( SAFEARRAY * * AttributeArray ) {
    short _result = 0;
    HRESULT _hr = get_AttributeStrings(AttributeArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline CoClassesPtr _TypeLibInfo::GetCoClasses ( ) {
    struct CoClasses * _result = 0;
    HRESULT _hr = get_CoClasses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CoClassesPtr(_result, false);
}

inline InterfacesPtr _TypeLibInfo::GetInterfaces ( ) {
    struct Interfaces * _result = 0;
    HRESULT _hr = get_Interfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InterfacesPtr(_result, false);
}

inline ConstantsPtr _TypeLibInfo::GetConstants ( ) {
    struct Constants * _result = 0;
    HRESULT _hr = get_Constants(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConstantsPtr(_result, false);
}

inline DeclarationsPtr _TypeLibInfo::GetDeclarations ( ) {
    struct Declarations * _result = 0;
    HRESULT _hr = get_Declarations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DeclarationsPtr(_result, false);
}

inline short _TypeLibInfo::GetTypeInfoCount ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeInfoCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _TypeLibInfo::Get_OldGetTypeKind ( ) {
    HRESULT _hr = get__OldGetTypeKind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TypeInfoPtr _TypeLibInfo::GetGetTypeInfo ( VARIANT * Index ) {
    struct TypeInfo * _result = 0;
    HRESULT _hr = get_GetTypeInfo(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfoPtr(_result, false);
}

inline short _TypeLibInfo::GetGetTypeInfoNumber ( _bstr_t Name ) {
    short _result = 0;
    HRESULT _hr = get_GetTypeInfoNumber(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _TypeLibInfo::IsSameLibrary ( struct _TypeLibInfo * CheckLib ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSameLibrary(CheckLib, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _TypeLibInfo::_OldResetSearchCriteria ( ) {
    HRESULT _hr = raw__OldResetSearchCriteria();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::_OldGetTypesWithMember ( ) {
    HRESULT _hr = raw__OldGetTypesWithMember();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::_OldGetMembersWithSubString ( ) {
    HRESULT _hr = raw__OldGetMembersWithSubString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::_OldGetTypesWithSubString ( ) {
    HRESULT _hr = raw__OldGetTypesWithSubString();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::_OldCaseTypeName ( ) {
    HRESULT _hr = raw__OldCaseTypeName();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::_OldCaseMemberName ( ) {
    HRESULT _hr = raw__OldCaseMemberName();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::_OldFillTypesList ( ) {
    HRESULT _hr = raw__OldFillTypesList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::_OldFillTypesCombo ( ) {
    HRESULT _hr = raw__OldFillTypesCombo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::_OldFillMemberList ( ) {
    HRESULT _hr = raw__OldFillMemberList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::_OldAddClassTypeToList ( ) {
    HRESULT _hr = raw__OldAddClassTypeToList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void _TypeLibInfo::PutAppObjString ( _bstr_t retVal ) {
    HRESULT _hr = put_AppObjString(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void _TypeLibInfo::PutLibNum ( short retVal ) {
    HRESULT _hr = put_LibNum(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _TypeLibInfo::GetShowLibName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLibName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _TypeLibInfo::PutShowLibName ( VARIANT_BOOL retVal ) {
    HRESULT _hr = put_ShowLibName(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void _TypeLibInfo::PutRef_OldListBoxNotification ( struct ListBoxNotification * _arg1 ) {
    HRESULT _hr = putref__OldListBoxNotification(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TypeKinds _TypeLibInfo::GetGetTypeKind ( short TypeInfoNumber ) {
    enum TypeKinds _result;
    HRESULT _hr = get_GetTypeKind(TypeInfoNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum SysKinds _TypeLibInfo::GetSysKind ( ) {
    enum SysKinds _result;
    HRESULT _hr = get_SysKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TliSearchTypes _TypeLibInfo::GetSearchDefault ( ) {
    enum TliSearchTypes _result;
    HRESULT _hr = get_SearchDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _TypeLibInfo::PutSearchDefault ( enum TliSearchTypes retVal ) {
    HRESULT _hr = put_SearchDefault(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TliSearchTypes _TypeLibInfo::CaseTypeName ( BSTR * bstrName, enum TliSearchTypes SearchType ) {
    enum TliSearchTypes _result;
    HRESULT _hr = raw_CaseTypeName(bstrName, SearchType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _TypeLibInfo::CaseMemberName ( BSTR * bstrName, enum TliSearchTypes SearchType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CaseMemberName(bstrName, SearchType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _TypeLibInfo::ResetSearchCriteria ( enum TypeFlags TypeFilter, VARIANT_BOOL IncludeEmptyTypes, VARIANT_BOOL ShowUnderscore ) {
    HRESULT _hr = raw_ResetSearchCriteria(TypeFilter, IncludeEmptyTypes, ShowUnderscore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SearchResultsPtr _TypeLibInfo::GetTypesWithMember ( _bstr_t MemberName, struct SearchResults * * StartResults, enum TliSearchTypes SearchType, VARIANT_BOOL Sort, VARIANT_BOOL ShowUnderscore ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_GetTypesWithMember(MemberName, StartResults, SearchType, Sort, ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline short _TypeLibInfo::GetTypesWithMemberDirect ( _bstr_t MemberName, int hWnd, enum TliWindowTypes WindowType, enum TliSearchTypes SearchType, VARIANT_BOOL ShowUnderscore ) {
    short _result = 0;
    HRESULT _hr = raw_GetTypesWithMemberDirect(MemberName, hWnd, WindowType, SearchType, ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SearchResultsPtr _TypeLibInfo::GetMembersWithSubString ( _bstr_t SubString, struct SearchResults * * StartResults, enum TliSearchTypes SearchType, VARIANT_BOOL SearchMiddle, struct _SearchHelper * * Helper, VARIANT_BOOL Sort, VARIANT_BOOL ShowUnderscore ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_GetMembersWithSubString(SubString, StartResults, SearchType, SearchMiddle, Helper, Sort, ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline short _TypeLibInfo::GetMembersWithSubStringDirect ( _bstr_t SubString, int hWnd, enum TliWindowTypes WindowType, enum TliSearchTypes SearchType, VARIANT_BOOL SearchMiddle, struct _SearchHelper * * Helper, VARIANT_BOOL ShowUnderscore ) {
    short _result = 0;
    HRESULT _hr = raw_GetMembersWithSubStringDirect(SubString, hWnd, WindowType, SearchType, SearchMiddle, Helper, ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SearchResultsPtr _TypeLibInfo::GetTypesWithSubString ( _bstr_t SubString, struct SearchResults * * StartResults, enum TliSearchTypes SearchType, VARIANT_BOOL SearchMiddle, VARIANT_BOOL Sort ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_GetTypesWithSubString(SubString, StartResults, SearchType, SearchMiddle, Sort, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline short _TypeLibInfo::GetTypesWithSubStringDirect ( _bstr_t SubString, int hWnd, enum TliWindowTypes WindowType, enum TliSearchTypes SearchType, VARIANT_BOOL SearchMiddle ) {
    short _result = 0;
    HRESULT _hr = raw_GetTypesWithSubStringDirect(SubString, hWnd, WindowType, SearchType, SearchMiddle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SearchResultsPtr _TypeLibInfo::GetTypes ( struct SearchResults * * StartResults, enum TliSearchTypes SearchType, VARIANT_BOOL Sort ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_GetTypes(StartResults, SearchType, Sort, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline short _TypeLibInfo::GetTypesDirect ( int hWnd, enum TliWindowTypes WindowType, enum TliSearchTypes SearchType ) {
    short _result = 0;
    HRESULT _hr = raw_GetTypesDirect(hWnd, WindowType, SearchType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SearchResultsPtr _TypeLibInfo::GetMembers ( long SearchData, VARIANT_BOOL ShowUnderscore ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_GetMembers(SearchData, ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline short _TypeLibInfo::GetMembersDirect ( long SearchData, int hWnd, enum TliWindowTypes WindowType, enum TliItemDataTypes ItemDataType, VARIANT_BOOL ShowUnderscore ) {
    short _result = 0;
    HRESULT _hr = raw_GetMembersDirect(SearchData, hWnd, WindowType, ItemDataType, ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _TypeLibInfo::SetMemberFilters ( enum FuncFlags FuncFilter, enum VarFlags VarFilter ) {
    HRESULT _hr = raw_SetMemberFilters(FuncFilter, VarFilter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _TypeLibInfo::MakeSearchData ( _bstr_t TypeInfoName, enum TliSearchTypes SearchType ) {
    long _result = 0;
    HRESULT _hr = raw_MakeSearchData(TypeInfoName, SearchType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline TypeInfosPtr _TypeLibInfo::GetTypeInfos ( ) {
    struct TypeInfos * _result = 0;
    HRESULT _hr = get_TypeInfos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TypeInfosPtr(_result, false);
}

inline RecordsPtr _TypeLibInfo::GetRecords ( ) {
    struct Records * _result = 0;
    HRESULT _hr = get_Records(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecordsPtr(_result, false);
}

inline IntrinsicAliasesPtr _TypeLibInfo::GetIntrinsicAliases ( ) {
    struct IntrinsicAliases * _result = 0;
    HRESULT _hr = get_IntrinsicAliases(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IntrinsicAliasesPtr(_result, false);
}

inline CustomDataCollectionPtr _TypeLibInfo::GetCustomDataCollection ( ) {
    struct CustomDataCollection * _result = 0;
    HRESULT _hr = get_CustomDataCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomDataCollectionPtr(_result, false);
}

inline MemberInfoPtr _TypeLibInfo::GetMemberInfo ( long SearchData, enum InvokeKinds InvokeKinds, long MemberId, _bstr_t MemberName ) {
    struct MemberInfo * _result = 0;
    HRESULT _hr = raw_GetMemberInfo(SearchData, InvokeKinds, MemberId, MemberName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MemberInfoPtr(_result, false);
}

inline UnionsPtr _TypeLibInfo::GetUnions ( ) {
    struct Unions * _result = 0;
    HRESULT _hr = get_Unions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UnionsPtr(_result, false);
}

inline SearchResultsPtr _TypeLibInfo::AddTypes ( SAFEARRAY * * TypeInfoNumbers, struct SearchResults * * StartResults, enum TliSearchTypes SearchType, VARIANT_BOOL Sort ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_AddTypes(TypeInfoNumbers, StartResults, SearchType, Sort, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline short _TypeLibInfo::AddTypesDirect ( SAFEARRAY * * TypeInfoNumbers, int hWnd, enum TliWindowTypes WindowType, enum TliSearchTypes SearchType ) {
    short _result = 0;
    HRESULT _hr = raw_AddTypesDirect(TypeInfoNumbers, hWnd, WindowType, SearchType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _TypeLibInfo::FreeSearchCriteria ( ) {
    HRESULT _hr = raw_FreeSearchCriteria();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::Register ( _bstr_t HelpDir ) {
    HRESULT _hr = raw_Register(HelpDir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _TypeLibInfo::UnRegister ( ) {
    HRESULT _hr = raw_UnRegister();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _TypeLibInfo::GetHelpString ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _TypeLibInfo::GetAppObjString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AppObjString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short _TypeLibInfo::GetLibNum ( ) {
    short _result = 0;
    HRESULT _hr = get_LibNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SearchResultsPtr _TypeLibInfo::GetMembersWithSubStringEx ( _bstr_t SubString, SAFEARRAY * * InvokeGroupings, struct SearchResults * * StartResults, enum TliSearchTypes SearchType, VARIANT_BOOL SearchMiddle, VARIANT_BOOL Sort, VARIANT_BOOL ShowUnderscore ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_GetMembersWithSubStringEx(SubString, InvokeGroupings, StartResults, SearchType, SearchMiddle, Sort, ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline SearchResultsPtr _TypeLibInfo::GetTypesWithMemberEx ( _bstr_t MemberName, enum InvokeKinds InvokeKind, struct SearchResults * * StartResults, enum TliSearchTypes SearchType, VARIANT_BOOL Sort, VARIANT_BOOL ShowUnderscore ) {
    struct SearchResults * _result = 0;
    HRESULT _hr = raw_GetTypesWithMemberEx(MemberName, InvokeKind, StartResults, SearchType, Sort, ShowUnderscore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchResultsPtr(_result, false);
}

inline IUnknownPtr _TypeLibInfo::GetITypeLib ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ITypeLib(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline void _TypeLibInfo::PutRefITypeLib ( IUnknown * retVal ) {
    HRESULT _hr = putref_ITypeLib(retVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _TypeLibInfo::GetHelpStringDll ( long LCID ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpStringDll(LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long _TypeLibInfo::GetHelpStringContext ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpStringContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t _TypeLibInfo::GetBestEquivalentType ( _bstr_t TypeInfoName ) {
    BSTR _result = 0;
    HRESULT _hr = get_BestEquivalentType(TypeInfoName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}
